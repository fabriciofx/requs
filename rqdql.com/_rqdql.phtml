<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>RQDQL, Requirements Definition and Query Language</title>
    <style type="text/css">
        body {
            font: 12pt Arial;
            padding: 30px;
        }
        h1 {
            margin-top: 2em;
            color: #2276A4;
            font-size: 1.5em;
        }
        h2 {
            color: black;
            font-size: 1.2em;
        }
        tt {
        }
        .code {
            font-size: 0.8em;
            font-family: monospace;
        }
        p {
            width: 700px;
            line-height: 1.5em;
        }
        pre.code,
        p.code {
            border: 1px solid #BCBEC0;
            padding: 5px;
            line-height: 1.3em;
        }
        td {
            vertical-align: top;
        }
        th {
            text-align: left;
            font-weight: normal;
            color: #2276A4;
            border-bottom: 1px solid #2276A4;
        }
    </style>
</head>
<body>
    
<h1>Requirements Definition and Query Language (RQDQL)</h1>

    <p><tt>
        $Revision: 1426 $<br/>
        $LastChangedDate: 2010-03-24 08:24:42 +0100 (Wed, 24 Mar 2010) $
    </tt></p>

    <p><a href="http://standards.ieee.org/reading/ieee/std_public/description/se/830-1998_desc.html">IEEE 830-1998</a>
        says: "SRS (<i>software requirements specification</i>) should be
        correct, unambiguous, complete, consistent, ranked for importance and/or stability,
        verifiable, modifiable, traceable". RQDQL is going to enable the creation 
        of such documents in plain text format. If you're interested to join the group
        developing RQDQL, email to <a href="team@rqdql.com">team@rqdql.com</a>.</p>

<h1>1. Quick Start</h1>

    <p>The scope definition document consists of <b>classes</b>
        and <b>use cases</b>, for example there are two classes
        (<tt>ActorVisitor</tt> and <tt>ImageFile</tt>) and one
        use case (<tt>UC3.2</tt>):</p>
    
    <p class="code">
        ActorVisitor: "an originator of HTTP request".<br/>
        UC3.2 where ActorUser (the user) deletes photos: "we will define it later...".<br/>
        ImageFile includes: PNG content, name, and size.
    </p>
    
    <p>Everything that is inside double quotes is considered as
        informal content, which we take "as is", without
        any attempt to understand what does it mean. You can place anything
        into it (except double quotes, of course), and you can place such
        informal texts in any place of the document. They are ignored
        during formal analysis.</p>
    
    <p>Consider a bit bigger example of a class <tt>ImageFile</tt>:</p>
    
    <p class="code">
        ImageFile includes:<br/>
        &nbsp;&nbsp;PNG content: "binary content as defined by ISO-15948";<br/>
        &nbsp;&nbsp;name: "a unique alpha-numeric name of the image";<br/>
        &nbsp;&nbsp;size: "total number of bytes in PNG content".
    </p>
    
    <p>The semantic is the same, the class contains three <b>slots</b>
        (<tt>PNG content</tt>, <tt>name</tt> and <tt>size</tt>). However
        in this example we added an informal explanation to every one of them.
        A colon separates the name of the slot and its invariant.
        Pay attention to the dots, colons, semicolons and commas used above.
        Comma, semicolon and preposition <tt>and</tt> can replace each other,
        for example the following declarations are the same in sense of semantic:
        </p>

    <p class="code">
        PNG content <b>and</b> name <b>and</b> size<br/>
        PNG content<b>,</b> name<b>,</b> size<br/>
        PNG content<b>;</b> name<b>;</b> size
    </p>

    <p>A slot is a class itself and can be used outside of its parent class
        by means of a preposition "<tt>of</tt>", for example:</b>

    <p class="code">
        PNG content <b>of</b> ImageFile <b>is a</b> binary file.<br/>
        Name <b>of</b> ImageFile <b>is</b> unique.<br/>
        Size <b>of</b> ImageFile <b>is a</b> "size of PNG content of this file".<br/>
    </p>
    
    <p>By means of "<tt>is/is a</tt>" we enable declaration of <b>invariants</b>
        on classes. Invariant is a condition that is always true, no matter
        what happens with the system. In the example above it is always true
        that "<tt>PNG content</tt>" is a file with binary content (not a readable
        ASCII text). Nobody can break this invariant and put a textual information
        into this slot. Similarly, the "<tt>name of ImageFile</tt>" is 
        always unique in its class. We won't be able to find two identical
        slots in the class "<tt>name of ImageFile</tt>", never.
        As you noticed, invariant could be declared with an informal text, as we 
        did above with <tt>size of ImageFile</tt>. Such a declaration means 
        absolutely nothing and will be ignored. But it helps when you're starting
        to develop the scope document.</p>
        
    <p>Informal texts play an important role during the document initial
        development and preliminary system analysis. When you don't know for sure
        how to define the information you have in a strict format &mdash; you
        should use informal texts. Later you will replace them.</p>

    <p>As you already noticed, RQDQL is a case-insensitive language in all places
        except one &mdash; class names should use
        <a href="http://en.wikipedia.org/wiki/CamelCase">CamelCase Notation</a>. Thus
        "<tt>name of ImageFile</tt>" and "<tt>Name of ImageFile</tt>" point
        us to the same class. However, <tt>ImageFile</tt> is a valid class
        name, and <tt>imagefile</tt> is just an English word.</p>

    <p>There is one special meta-class, which we should mention &mdash; Actors.
        Every class that has <tt>Actor</tt> prefix is an instance of meta-class
        Actors. In the scope definition document actors represent people,
        machines, services, databases, etc. &mdash; anything and anybody
        who interact with our system.</p>

    <p>To put things together we should declare a use case, which is 
        a step-by-step explanation of interaction between one of actors
        and a number of classes, for example:</p>
    
    <p class="code">
        UC8.1 where ActorAdmin (the admin) synchronizes database with OnlineBackup:<br/>
        &nbsp;&nbsp;1. The admin reads status of OnlineBackup.<br/>
        &nbsp;&nbsp;2. The admin "selects files for new backup" - the files.<br/>
        &nbsp;&nbsp;3. We validate the files.<br/>
        &nbsp;&nbsp;4. "Admin confirms that he/she agrees with terms of use".<br/>
        &nbsp;&nbsp;5. We encrypt the files "using one of the encryption methods pre-defined".<br/>
        &nbsp;&nbsp;6. We upload files to ActorAmazon.
    </p>

    <p>to be continued...</p>

</body>
</html>