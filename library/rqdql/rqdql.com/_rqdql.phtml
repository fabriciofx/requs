<!DOCTYPE html
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>RQDQL, Requirements Definition and Query Language</title>
    <style type="text/css">
        body {
            font: 12pt Arial;
            padding: 30px;
        }
        h1 {
            margin-top: 2em;
            color: #2276A4;
            font-size: 1.5em;
        }
        h2 {
            color: black;
            font-size: 1.2em;
        }
        tt,
        .code {
            font-size: 0.8em;
            font-family: monospace;
        }
        pre.code,
        p.code {
            background: #BCBEC0;
            margin-left: 3em;
            padding: 5px;
            width: 700px;
        }
        td {
            vertical-align: top;
        }
        th {
            text-align: left;
            font-weight: normal;
            color: #2276A4;
            border-bottom: 1px solid #2276A4;
        }
    </style>
</head>
<body>
    
<h1>Requirements Definition and Query Language (RQDQL)</h1>

    <p><tt>
        $Revision: 1426 $<br/>
        $LastChangedDate: 2010-03-24 08:24:42 +0100 (Wed, 24 Mar 2010) $
    </tt></p>

    <p>IEEE 830 says: "SRS (<i>software requirements specification</i>) should be
        correct, unambiguous, complete, consistent, ranked for importance and/or stability,
        verifiable, modifiable, traceable. RQDQL is going to enable the creation 
        of such documents in plain text format. If you're interested to join the group
        developing RQDQL, email to <a href="team@rqdql.com">team@rqdql.com</a>.</p>

<h1>1. Quick Start</h1>

    <p>Entire scope definition document consists of <i>statements</i>,
    related to <b>entities</b> and and <b>use cases</b>.
    Statement always has a trailing dot.
    This example has three statements (spaces, new lines, and tabs are ignored):</p>
    
    <p class="code">
        ActorVisitor: "an originator of HTTP request".<br/>
        UC3 where ActorUser (the user) deletes photos: "we will define it later...".<br/>
        ActorUser includes: name; password; email.
    </p>
    
    <p>Example of a fully-specified <b>entity</b>:</p>
    
    <p class="code">
        ActorUser includes:<br/>
        &nbsp;&nbsp;name: "unique name of the file";<br/>
        &nbsp;&nbsp;email: email address;<br/>
        &nbsp;&nbsp;photos: "binary files, in GIF, PNG or JPEG".
    </p>

    <p>Example of a fully-specified <b>use case</b>:</p>
    
    <p class="code">
        UC8.1 where ActorAdmin (the admin) synchronizes database with OnlineBackup:<br/>
        &nbsp;&nbsp;1. The admin reads status of OnlineBackup.<br/>
        &nbsp;&nbsp;2. The admin "selects files for new backup" - the files.<br/>
        &nbsp;&nbsp;3. We validate the files.<br/>
        &nbsp;&nbsp;4. "Admin confirms that he/she agrees with terms of use".<br/>
        &nbsp;&nbsp;5. We encrypt the files "using one of the encryption methods pre-defined".<br/>
        &nbsp;&nbsp;6. We upload files to ActorAmazon.
    </p>

<h1>2. Syntax and Semantic</h1>

    <h2>2.1. Entity</h2>
    
        <p><i>Entity</i> is some data entity, or actor, or system under development (SUD). More
            formally, object is a <i>class</i> in UML.
            Objects are specified by CamelCase notation, for example:</p>
            
        <p class="code">
            ActorVisitor: "an originator of HTTP request".
        </p>

        <p>Objects may inherit each other, multiple inheritance is allowed, for example:</p>
        
        <p class="code">
            ActorUser <b>is an</b> ActorVisitor.<br/>
        </p>
            
        <p>An object can include other objects, which are <i>slots</i> of it. Formally,
            they have <i>aggregation</i> relations with the object. Slots may be named
            with small letters only and should not use CamelCase notation.
            Synonyms of <tt>includes</tt> are:
                <tt>include</tt>,
                <tt>has</tt>, 
                <tt>contain</tt>.
                <tt>contains</tt>.
            </p>

        <p class="code">
            ActorUser <b>includes</b>: name; email; date of birth.<br/>
            IfAmazon <b>includes</b>:<br/>
            &nbsp;&nbsp;secret key: "32-letter/digit string";<br/>
            &nbsp;&nbsp;account number: "unique number of the Amazon account".<br/>
            ActorAdmin <b>includes</b>:<br/>
            &nbsp;&nbsp;access pair: open key; secret key;;<br/>
            &nbsp;&nbsp;mobile phone.
        </p>

        <p>To reference an object its full name should be used. Any part of
            an object can be referenced by <tt>of</tt> word, e.g.:</p>

        <p class="code">
            ... account balance <b>of</b> ActorUser ...<br/>
            ... files <b>of</b> IfAmazon ...<br/>
            ... emails <b>of</b> ActorUser-s ...<br/>
            ... secret key <b>of</b> access pair <b>of</b> ActorAdmin ...
        </p>

    <h2>2.2. Plural form</h2>

        <p>Plural forms of any object can be expressed by a suffix:</p>

        <ul>
            <li>"<tt>ImageFile</tt>" means "<tt>exactly one ImageFile</tt>, which is "<tt>1</tt>" in UML</li>
            <li>"<tt>ImageFile(s)</tt>" means "<tt>one, none or many ImageFiles</tt>": "<tt>0..*</tt>"</li>
            <li>"<tt>ImageFile-s</tt>" means "<tt>one ImageFile or many</tt>": "<tt>1..*</tt>"</li>
            <li>"<tt>ImageFile-?</tt>" means "<tt>one ImageFile or none</tt>": "<tt>0..1</tt>"</li>
        </ul>

    <h2>2.3. Vague text</h2>

        <p>You can use any vague text, if it is inside double quotes, for example:</p>

        <p class="code">
            UC3.4: "will be defined later".<br/>
            ActorUser: "a human being with persistent ID".
        </p>

</body>
</html>