/**
 * RQDQL.com, Requirements Definition and Query Language
 *
 * Redistribution and use in source and binary forms, with or 
 * without modification, are PROHIBITED without prior written 
 * permission from the author. This product may NOT be used 
 * anywhere and on any computer except the server platform of 
 * rqdql.com. located at www.rqdql.com. If you received this 
 * code occasionally and without intent to use it, please report 
 * this incident to the author by email: team@rqdql.com
 *
 * @author Yegor Bugayenko <egor@tpc2.com>
 * @copyright Copyright (c) rqdql.com, 2010
 * @version $Id: Data.h 2308 2010-07-14 12:25:35Z yegor256@yahoo.com $
 */

#include <string>
#include <vector>
#include <boost/format.hpp>
#include "Solm/Term.h"
#include "rqdql.h"
#include "rqdql/Exception.h"

/**
 * These files are auto-generated by FLEX/BISON tools called from
 * Makefile. Without these files we can't proceed here
 * and compilation will be failed.
 */
#include "Solm/Term/term.y.c-symbols.h"

/**
 * Declaration here, implementation later
 */
void termerror(const char*, ...);

/**
 * These files are auto-generated by FLEX/BISON tools called from
 * Makefile. Without these files we can't proceed here
 * and compilation will be failed.
 */
#include "Solm/Term/term.l.c"
#include "Solm/Term/term.y.c"

solm::Term::Term(const std::string& s) {
    try {
        term_switch_to_buffer(term_scan_string(s.c_str()));
        termparse();
    } catch (...) {
        throw rqdql::Exception(
            boost::format(rqdql::_t("Invalid term syntax: '%s'")) % s
        );
    }
}

bool solm::Term::is(solm::Term::Kind k) const {
    return true;
}

void termerror(const char*, ...) {
    throw 0;
}
